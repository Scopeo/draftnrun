"""add graph_runner_id, version_name, tag_name, change_log as columns

Revision ID: 18b7d7f00e64
Revises: 3ef4828f70f9
Create Date: 2025-10-09 11:18:55.971604

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "18b7d7f00e64"
down_revision: Union[str, None] = "7a9e2b3f4c5d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("spans", sa.Column("graph_runner_id", sa.String(), nullable=True))
    op.add_column("spans", sa.Column("version_name", sa.String(), nullable=True))
    op.add_column("spans", sa.Column("tag_name", sa.String(), nullable=True))
    op.add_column("spans", sa.Column("change_log", sa.String(), nullable=True))
    op.drop_index(op.f("ix_spans_call_type"), table_name="spans")
    op.drop_index(op.f("ix_spans_environment"), table_name="spans")
    op.create_index(op.f("ix_spans_graph_runner_id"), "spans", ["graph_runner_id"], unique=False)
    # ### end Alembic commands ###

    # Data migration: strip leading 'v'/'V' from tag_version and populate tag_name
    connection = op.get_bind()
    # Remove a single leading 'v' or 'V' when followed by semver digits
    connection.execute(
        sa.text(
            """
            UPDATE spans
            SET tag_version = SUBSTRING(tag_version FROM 2)
            WHERE tag_version ~ '^[vV][0-9]+\\.[0-9]+\\.[0-9]+$'
            """
        )
    )
    # Set tag_name = tag_version-version_name where both exist
    connection.execute(
        sa.text(
            """
            UPDATE spans
            SET tag_name = tag_version || '-' || version_name
            WHERE tag_version IS NOT NULL AND version_name IS NOT NULL
            """
        )
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_spans_graph_runner_id"), table_name="spans")
    op.create_index(op.f("ix_spans_environment"), "spans", ["environment"], unique=False)
    op.create_index(op.f("ix_spans_call_type"), "spans", ["call_type"], unique=False)
    op.drop_column("spans", "change_log")
    op.drop_column("spans", "tag_name")
    op.drop_column("spans", "version_name")
    op.drop_column("spans", "graph_runner_id")
    # ### end Alembic commands ###

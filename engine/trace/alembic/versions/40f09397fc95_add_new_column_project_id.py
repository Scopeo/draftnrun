"""add new column project_id

Revision ID: 40f09397fc95
Revises: c22a1d518176
Create Date: 2025-09-24 12:03:37.087001

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "40f09397fc95"
down_revision: Union[str, None] = "c22a1d518176"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("spans", sa.Column("project_id", sa.String(), nullable=True))
    op.create_index(op.f("ix_spans_project_id"), "spans", ["project_id"], unique=False)

    # Data migration: Copy project_id from attributes JSON to new column
    connection = op.get_bind()

    # Use regex to extract project_id without JSON parsing to avoid Unicode issues
    connection.execute(
        sa.text(
            """
        UPDATE spans
        SET project_id = CASE
            WHEN attributes ~ '"project_id"\\s*:\\s*"([^"]*)"' THEN
                regexp_replace(
                    (regexp_match(attributes, '"project_id"\\s*:\\s*"([^"]*)"'))[1],
                    '\\\\u0000',
                    '',
                    'g'
                )
            ELSE NULL
        END
        WHERE attributes ~ '"project_id"\\s*:\\s*"[^"]*"'
        AND length(trim(regexp_replace(
            (regexp_match(attributes, '"project_id"\\s*:\\s*"([^"]*)"'))[1],
            '\\\\u0000',
            '',
            'g'
        ))) > 0
    """
        )
    )

    # Optional: Remove project_id from attributes JSON to clean up
    # Only remove from spans that actually have project_id and were successfully migrated
    connection.execute(
        sa.text(
            """
        UPDATE spans
        SET attributes = regexp_replace(
            attributes,
            ',"project_id"\\s*:\\s*"[^"]*"',
            '',
            'g'
        )
        WHERE project_id IS NOT NULL
        AND attributes ~ '"project_id"\\s*:\\s*"[^"]*"'
    """
        )
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Data migration rollback: Copy project_id back to attributes JSON
    connection = op.get_bind()

    # Use string manipulation to avoid JSON parsing issues with Unicode
    # Only restore project_id to attributes for spans that actually had one
    connection.execute(
        sa.text(
            """
        UPDATE spans
        SET attributes = CASE
            WHEN attributes ~ '^\\s*\\{' THEN
                -- Insert project_id into existing JSON object
                regexp_replace(
                    attributes,
                    '^(\\s*\\{)',
                    '\\1"project_id":"' || project_id || '",',
                    'g'
                )
            ELSE
                -- Create new JSON object if attributes is not valid JSON
                '{"project_id":"' || project_id || '",' || substring(attributes from 2) || '}'
        END
        WHERE project_id IS NOT NULL
        AND project_id != ''
        AND length(trim(project_id)) > 0
    """
        )
    )

    op.drop_index(op.f("ix_spans_project_id"), table_name="spans")
    op.drop_column("spans", "project_id")
    # ### end Alembic commands ###

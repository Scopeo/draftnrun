"""improve version and qa

Revision ID: 1cd27a655140
Revises: 8ae8246c0768
Create Date: 2025-10-15 14:51:03.405512

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "1cd27a655140"
down_revision: Union[str, None] = "8ae8246c0768"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Keep the unique index on node_id as it's referenced by foreign keys
    # Just add the composite unique constraint
    op.create_unique_constraint("uq_graph_runner_node", "graph_runner_nodes", ["graph_runner_id", "node_id"])

    # Drop the old version column first
    op.drop_column("version_output", "version", schema="quality_assurance")

    # Add the new graph_runner_id column as nullable initially
    # If there's existing data, it needs to be migrated separately
    op.add_column("version_output", sa.Column("graph_runner_id", sa.UUID(), nullable=True), schema="quality_assurance")

    # Populate graph_runner_id with the draft version's graph_runner_id for existing data
    conn = op.get_bind()
    conn.execute(
        sa.text(
            """
        UPDATE quality_assurance.version_output vo
        SET graph_runner_id = peb.graph_runner_id
        FROM quality_assurance.input_groundtruth ig
        JOIN quality_assurance.dataset_project dp ON ig.dataset_id = dp.id
        JOIN project_env_binding peb ON dp.project_id = peb.project_id
        WHERE vo.input_id = ig.id
        AND peb.environment = 'draft'
        AND vo.graph_runner_id IS NULL
    """
        )
    )

    # Remove duplicate records, keeping only the latest one for each (input_id, graph_runner_id) pair
    conn.execute(
        sa.text(
            """
        DELETE FROM quality_assurance.version_output
        WHERE id IN (
            SELECT id FROM (
                SELECT id,
                       ROW_NUMBER() OVER (
                           PARTITION BY input_id, graph_runner_id
                           ORDER BY updated_at DESC, id DESC
                       ) as row_num
                FROM quality_assurance.version_output
            ) ranked
            WHERE row_num > 1
        )
    """
        )
    )

    # Make the column NOT NULL after data migration
    op.alter_column("version_output", "graph_runner_id", nullable=False, schema="quality_assurance")

    op.create_index(
        op.f("ix_quality_assurance_version_output_graph_runner_id"),
        "version_output",
        ["graph_runner_id"],
        unique=False,
        schema="quality_assurance",
    )
    op.create_unique_constraint(
        "uq_version_output_input_graph_runner",
        "version_output",
        ["input_id", "graph_runner_id"],
        schema="quality_assurance",
    )
    op.create_foreign_key(
        "fk_version_output_graph_runner_id",
        "version_output",
        "graph_runners",
        ["graph_runner_id"],
        ["id"],
        source_schema="quality_assurance",
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop foreign key constraint - handle both named and auto-generated constraint names
    conn = op.get_bind()
    fk_name_result = conn.execute(
        sa.text(
            """
        SELECT constraint_name
        FROM information_schema.table_constraints
        WHERE table_schema = 'quality_assurance'
        AND table_name = 'version_output'
        AND constraint_type = 'FOREIGN KEY'
        AND constraint_name LIKE '%graph_runner%'
    """
        )
    ).fetchone()

    if fk_name_result:
        fk_name = fk_name_result[0]
        op.drop_constraint(fk_name, "version_output", schema="quality_assurance", type_="foreignkey")

    op.drop_constraint(
        "uq_version_output_input_graph_runner", "version_output", schema="quality_assurance", type_="unique"
    )
    op.drop_index(
        op.f("ix_quality_assurance_version_output_graph_runner_id"),
        table_name="version_output",
        schema="quality_assurance",
    )

    # Add the version column as nullable first
    op.add_column(
        "version_output",
        sa.Column(
            "version", postgresql.ENUM("draft", "production", name="env_type"), autoincrement=False, nullable=True
        ),
        schema="quality_assurance",
    )

    # Populate version column based on graph_runner_id
    # Set to 'draft' for all records since we migrated from draft graph_runner_id
    conn.execute(
        sa.text(
            """
        UPDATE quality_assurance.version_output
        SET version = 'draft'
        WHERE version IS NULL
    """
        )
    )

    # Make version column NOT NULL after populating
    op.alter_column("version_output", "version", nullable=False, schema="quality_assurance")

    # Drop the graph_runner_id column
    op.drop_column("version_output", "graph_runner_id", schema="quality_assurance")

    op.drop_constraint("uq_graph_runner_node", "graph_runner_nodes", type_="unique")
    # ### end Alembic commands ###

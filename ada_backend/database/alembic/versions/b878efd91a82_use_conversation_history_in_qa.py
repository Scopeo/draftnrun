"""use conversation history in qa

Revision ID: b878efd91a82
Revises: f1e79aa97806
Create Date: 2025-10-27 12:12:41.252366

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "b878efd91a82"
down_revision: Union[str, None] = "a86270305bab"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    role_type_enum = sa.Enum("user", "assistant", name="role_type")
    role_type_enum.create(op.get_bind(), checkfirst=True)

    op.create_table(
        "output_groundtruth",
        sa.Column("id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("message", sa.String(), nullable=False),
        sa.Column("message_id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(["message_id"], ["quality_assurance.input_groundtruth.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        schema="quality_assurance",
    )
    op.create_index(
        op.f("ix_quality_assurance_output_groundtruth_id"),
        "output_groundtruth",
        ["id"],
        unique=False,
        schema="quality_assurance",
    )
    op.create_index(
        op.f("ix_quality_assurance_output_groundtruth_message_id"),
        "output_groundtruth",
        ["message_id"],
        unique=False,
        schema="quality_assurance",
    )
    # Add columns as nullable first to allow data backfill on existing rows
    op.add_column(
        "input_groundtruth", sa.Column("conversation_id", sa.UUID(), nullable=True), schema="quality_assurance"
    )
    op.add_column(
        "input_groundtruth",
        sa.Column("role", sa.Enum("user", "assistant", name="role_type"), nullable=True),
        schema="quality_assurance",
    )
    op.add_column("input_groundtruth", sa.Column("order", sa.Integer(), nullable=True), schema="quality_assurance")

    # Backfill existing rows to satisfy NOT NULL constraints later
    op.execute("UPDATE quality_assurance.input_groundtruth SET conversation_id = COALESCE(conversation_id, id)")
    op.execute('UPDATE quality_assurance.input_groundtruth SET "order" = COALESCE("order", 0)')

    # Migrate old groundtruth data to the new output_groundtruth table
    # Only migrate rows where groundtruth is not NULL (old single-row case)
    op.execute(
        """
        INSERT INTO quality_assurance.output_groundtruth (message, message_id, created_at, updated_at)
        SELECT
            groundtruth,
            id,
            created_at,
            updated_at
        FROM quality_assurance.input_groundtruth
        WHERE groundtruth IS NOT NULL
    """
    )

    # Enforce NOT NULL after backfill
    op.alter_column(
        "input_groundtruth",
        "conversation_id",
        existing_type=sa.UUID(),
        nullable=False,
        schema="quality_assurance",
    )
    op.alter_column(
        "input_groundtruth",
        "order",
        existing_type=sa.Integer(),
        nullable=False,
        schema="quality_assurance",
    )

    # Remove deprecated column
    op.drop_column("input_groundtruth", "groundtruth", schema="quality_assurance")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Restore the groundtruth column first
    op.add_column(
        "input_groundtruth",
        sa.Column("groundtruth", sa.VARCHAR(), autoincrement=False, nullable=True),
        schema="quality_assurance",
    )

    # Migrate data back from output_groundtruth to input_groundtruth
    # For each input_groundtruth, take the first output_groundtruth message if it exists
    op.execute(
        """
        UPDATE quality_assurance.input_groundtruth ig
        SET groundtruth = (
            SELECT og.message
            FROM quality_assurance.output_groundtruth og
            WHERE og.message_id = ig.id
            ORDER BY og.created_at ASC
            LIMIT 1
        )
        WHERE EXISTS (
            SELECT 1
            FROM quality_assurance.output_groundtruth og
            WHERE og.message_id = ig.id
        )
    """
    )

    op.drop_column("input_groundtruth", "order", schema="quality_assurance")
    op.drop_column("input_groundtruth", "role", schema="quality_assurance")
    op.drop_column("input_groundtruth", "conversation_id", schema="quality_assurance")
    op.drop_index(
        op.f("ix_quality_assurance_output_groundtruth_message_id"),
        table_name="output_groundtruth",
        schema="quality_assurance",
    )
    op.drop_index(
        op.f("ix_quality_assurance_output_groundtruth_id"), table_name="output_groundtruth", schema="quality_assurance"
    )
    op.drop_table("output_groundtruth", schema="quality_assurance")
    role_type_enum = sa.Enum("user", "assistant", name="role_type")
    role_type_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###

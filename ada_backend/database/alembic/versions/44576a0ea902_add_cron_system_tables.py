"""Add cron system tables

Revision ID: 44576a0ea902
Revises: ed8f19491923
Create Date: 2025-09-17 00:33:03.785224

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import JSONB


# revision identifiers, used by Alembic.
revision: str = "44576a0ea902"
down_revision: Union[str, None] = "3253550650e4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS scheduler")

    op.execute(
        """
DO $$ BEGIN
    CREATE TYPE scheduler.cron_entrypoint AS ENUM ('agent_inference', 'dummy_print');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;
"""
    )
    op.execute(
        """
DO $$ BEGIN
    CREATE TYPE scheduler.cron_status AS ENUM ('success', 'error', 'running');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;
"""
    )

    op.create_table(
        "cron_jobs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("organization_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("cron_expr", sa.String(), nullable=False),
        sa.Column("tz", sa.String(), nullable=False),
        sa.Column("entrypoint", sa.String(), nullable=False),  # Temporary type
        sa.Column("payload", JSONB(), nullable=False),
        sa.Column("is_enabled", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="scheduler",
    )

    op.create_table(
        "cron_runs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("cron_id", sa.UUID(), nullable=False),
        sa.Column("scheduled_for", sa.DateTime(timezone=True), nullable=False),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("finished_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("status", sa.String(), nullable=False),  # Temporary type
        sa.Column("error", sa.Text(), nullable=True),
        sa.Column("result", JSONB(), nullable=True),
        sa.ForeignKeyConstraint(
            ["cron_id"],
            ["scheduler.cron_jobs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="scheduler",
    )

    op.alter_column(
        "cron_jobs",
        "entrypoint",
        type_=sa.Enum("agent_inference", "dummy_print", name="cron_entrypoint", schema="scheduler"),
        postgresql_using="entrypoint::scheduler.cron_entrypoint",
        schema="scheduler",
    )

    op.alter_column(
        "cron_runs",
        "status",
        type_=sa.Enum("success", "error", "running", name="cron_status", schema="scheduler"),
        postgresql_using="status::scheduler.cron_status",
        schema="scheduler",
    )

    op.create_index(op.f("ix_scheduler_cron_jobs_id"), "cron_jobs", ["id"], unique=False, schema="scheduler")
    op.create_index(
        op.f("ix_scheduler_cron_jobs_organization_id"),
        "cron_jobs",
        ["organization_id"],
        unique=False,
        schema="scheduler",
    )
    op.create_index(op.f("ix_scheduler_cron_runs_cron_id"), "cron_runs", ["cron_id"], unique=False, schema="scheduler")
    op.create_index(op.f("ix_scheduler_cron_runs_id"), "cron_runs", ["id"], unique=False, schema="scheduler")
    op.create_index(
        op.f("ix_scheduler_cron_runs_scheduled_for"), "cron_runs", ["scheduled_for"], unique=False, schema="scheduler"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_scheduler_cron_runs_scheduled_for"), table_name="cron_runs", schema="scheduler")
    op.drop_index(op.f("ix_scheduler_cron_runs_id"), table_name="cron_runs", schema="scheduler")
    op.drop_index(op.f("ix_scheduler_cron_runs_cron_id"), table_name="cron_runs", schema="scheduler")
    op.drop_table("cron_runs", schema="scheduler")
    op.drop_index(op.f("ix_scheduler_cron_jobs_organization_id"), table_name="cron_jobs", schema="scheduler")
    op.drop_index(op.f("ix_scheduler_cron_jobs_id"), table_name="cron_jobs", schema="scheduler")
    op.drop_table("cron_jobs", schema="scheduler")
    op.execute("DROP TYPE IF EXISTS scheduler.cron_entrypoint")
    op.execute("DROP TYPE IF EXISTS scheduler.cron_status")
    op.execute("DROP SCHEMA IF EXISTS scheduler CASCADE")
    # ### end Alembic commands ###
